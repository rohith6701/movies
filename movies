const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')

const path = require('path')
const dbPath = path.join(__dirname, 'moviesData.db')

const app = express()
app.use(express.json())

const database = null

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => console.log('Success'))
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDbAndServer()

const convertDirectorDbObjectToResponseObject = dbObject => {
  return {
    directorId: dbObject.director_id,
    directorName: dbObject.director_name,
  }
}

app.get('/movies/', async (request, response) => {
  const getMovieQuery = `
    SELECT 
      movie_name
    FROM 
      movie`
  const moviesList = await database.all(getMovieQuery)
  response.send(
    moviesList.map(eachMovie => ({movieName: eachMovie.movie_name})),
  )
})

app.post('/movies/', async (request, response) => {
  const {directorId, movieName, leadActor} = request.body
  const postMovieQuery = `
    INSERT INTO
    movie(director_id,movie_name,lead_actor)
    VALUES (${directorId},'${movieName}','${leadActor}')`
  await database.run(postMovieQuery)
  response.send('Movie Successfully Added')
})

app.get('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const getMovieQuery = `
    SELECT 
      *
    FROM 
      movie
    WHERE
     movie_id= ${movieId}`
  const movie = await database.get(getMovieQuery)
  response.send(convertDirectorDbObjectToResponseObject(movie))
})

app.put('/movies/:movieId/', async (request, response) => {
  const {directorId, movieName, leadActor} = request.body
  const {movieId} = request.params
  const putMovieQuery = `
  UPDATE
  movie
  SET
  director_id=${directorId},
  movie_name='${movieName}',
  lead_actor='${leadActor}'
  WHERE
    movie_id=${movieId}`

  await database.run(putMovieQuery)
  response.send('Movie Details Updated')
})

app.delete('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params

  const deleteMovieQuery = `
  DELETE
  movie
  WHERE
  movie_id=${movieId}`

  await database.run(deleteMovieQuery)
  response.send('Movie Removed')
})

app.get('/directors/', async (request, response) => {
  const getDirectorQuery = `
    SELECT 
      *
    FROM 
      director`
  const directorList = await database.all(getDirectorQuery)
  response.send(
    directorList.map(eachDirector =>
      convertDirectorDbObjectToResponseObject(eachDirector),
    ),
  )
})

app.get('/directors/:directorId/movies/', async (request, response) => {
  const {directorId} = request.params
  const getDirectorMoviesQuery = `
    SELECT 
      movie_name
    FROM 
      movie
    WHERE
      director_id=${directorId}`
  const moviesList = await database.all(getDirectorMoviesQuery)
  response.send(
    moviesList.map(eachMovie => ({movieName: eachMovie.movie_name})),
  )
})

module.exports = app
